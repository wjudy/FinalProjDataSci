import snscrape.modules.twitter as sntwitter
import pandas as pd
import os
import numpy as np
import matplotlib.pyplot as plt
from flair.models import TextClassifier
from flair.data import Sentence
from segtok.segmenter import split_single
import pandas as pd
import re
from flair.models import SequenceTagger
from pathlib import Path
classifier = TextClassifier.load('en-sentiment')

#Flair Setup:https://rileymjones.medium.com/sentiment-anaylsis-with-the-flair-nlp-library-cfe830bfd0f4
#Flair Advantages:https://www.analyticsvidhya.com/blog/2019/02/flair-nlp-library-python/ 
#Flair Comparison:https://towardsdatascience.com/the-best-python-sentiment-analysis-package-1-huge-common-mistake-d6da9ad6cdeb
def clean(raw):
    """ Remove hyperlinks and markup """
    result = re.sub("<[a][^>]*>(.+?)</[a]>", 'Link.', raw)
    result = re.sub('&gt;', "", result)
    result = re.sub('&#x27;', "'", result)
    result = re.sub('&quot;', '"', result)
    result = re.sub('&#x2F;', ' ', result)
    result = re.sub('<p>', ' ', result)
    result = re.sub('</i>', '', result)
    result = re.sub('&#62;', '', result)
    result = re.sub('<i>', ' ', result)
    result = re.sub("\n", '', result)
    return result

def make_sentences(text):
    """ Break apart text into a list of sentences """
    # sentences=[]
    # sents=split_single(text)
    # for sent in sents:
    #     if 'http' not in sent:
    #         sentences.append(sent)
    sentences = [sent for sent in split_single(text)]
    return sentences

def predict(sentence):
    """ Predict the sentiment of a sentence """
    if sentence == "":
        return 0
    text = Sentence(sentence)
    # stacked_embeddings.embed(text)
    classifier.predict(text)
    #print(text.to_dict())
    value = text.labels[0].to_dict()['value'] 
    
    # #print(value)
    # if value == 'POSITIVE':
    #     #result = text.to_dict()['all labels'][0]['confidence']
    #     return 1
    # else:
    #     #print(text.to_dict())
    #     #result = -(text.to_dict()['all labels'][0]['confidence'])
    #     return -1
    # #return round(result, 3)
    
    return value
def get_scores(sentences):
    """ Call predict on every sentence of a text """
    results = []
    
    for i in range(0, len(sentences)): 
        results.append(predict(sentences[i]))
    return results

def get_sum(scores):
    
    result = round(sum(scores), 3)/len(scores)
    return result




# Create month of March
daysMarch2019 = ["2019-03-01", "2019-03-02", "2019-03-03", "2019-03-04", "2019-03-05", "2019-03-06", "2019-03-07", "2019-03-08", "2019-03-09", "2019-03-10", "2019-03-11", "2019-03-12", "2019-03-13", "2019-03-14", "2019-03-15", "2019-03-16", "2019-03-17", "2019-03-18", "2019-03-19", "2019-03-20", "2019-03-21", "2019-03-22", "2019-03-23", "2019-03-24", "2019-03-25", "2019-03-26", "2019-03-27", "2019-03-28", "2019-03-29", "2019-03-30", "2019-03-31", "2019-04-01"]
march_2019_dict = {}



for counter in range(31):
    print(counter)
    pos=0.0
    neg=0.0
    queryString = "Democrats since:" + daysMarch2019[counter] + " " + "until:" + daysMarch2019[counter+1]
    for i, tweet in enumerate(sntwitter.TwitterSearchScraper(queryString).get_items()):
        
        if i == 100:
            break
        if not tweet.inReplyToUser and not ("@" in str(tweet.content)) and str(tweet.lang) == 'en' and 'http' not in str(tweet.content) :
            stringa = str(tweet.content)
            stringa= clean(stringa)
            sentences= make_sentences(stringa)
            #march_2019_dict[counter + 1] = stringa
            if 'POSITIVE' in get_scores(sentences):
                pos+=1
            else:
                neg+=1
    
    #print(pos)
    #print(neg)
    total=pos+neg
    #print(total)
    ratio_pos=pos/total
    ratio_neg=neg/total
    march_2019_dict[counter+1]=[total,ratio_pos,ratio_neg]
    #print(march_2019_dict)
#df=pd.DataFrame(march_2019_dict.items(), columns=['Day','text'])
print(march_2019_dict)

#print(0)

# #print(1)
# df.content = df.text.apply(clean)
# #print(2)
# df['sentences'] = df.content.apply(make_sentences)
# #print(3)
# df['scores'] = df['sentences'].apply(get_scores)
# #print(4)
# df['scores_avg'] = df.scores.apply(get_sum)
# #print('final')
# df = df.dropna()
# df = df.reset_index(drop=True)
# print(df.head())
# filepath = Path('Users/Samir Fridhi/FlairTest.csv')  
# filepath.parent.mkdir(parents=True, exist_ok=True)  
# df.to_csv(filepath)  
